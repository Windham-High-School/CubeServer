[tox]
isolated_build = True
envlist = unit, lint

[testenv]
; docker-compose = docker-compose.yml
docker =
    mongodb
    accesspoint
    beaconserver
; basepython = python3.10
dockerenv =
    MONGODB_DATABASE=flaskdb
    MONGODB_USERNAME=flask
    MONGODB_HOSTNAME=mongodb
    MONGODB_PASSWORD={env:MONGODB_PWD}
    API_WRAPPER_GIT_URL_ARDUINO={env:API_WRAPPER_GIT_URL_ARDUINO}
    API_WRAPPER_ZIP_FILENAME_ARDUINO={env:API_WRAPPER_ZIP_FILENAME_ARDUINO}
    API_WRAPPER_GIT_URL_PYTHON={env:API_WRAPPER_GIT_URL_PYTHON}
    API_WRAPPER_ZIP_FILENAME_PYTHON={env:API_WRAPPER_ZIP_FILENAME_PYTHON}
    API_WRAPPER_GIT_URL_CIRCUITPYTHON={env:API_WRAPPER_GIT_URL_CIRCUITPYTHON}
    API_WRAPPER_ZIP_FILENAME_CIRCUITPYTHON={env:API_WRAPPER_ZIP_FILENAME_CIRCUITPYTHON}
    API_WRAPPER_PEM_FILENAME={env:API_WRAPPER_PEM_FILENAME}
    BEACON_CODE_GIT_URL={env:BEACON_CODE_GIT_URL}
    AP_SSID={env:AP_SSID}
    API_ADDR={env:API_ADDR}
    API_ALT_ADDR={env:API_ALT_ADDR}
    API_PORT={env:API_PORT}
    SERVER_NAME={env:DOMAIN}
    LOGLEVEL={env:LOGLEVEL}
deps =
    pytest
    pytest-cov
    coverage
    sphinx
    flake8

; Linting
[testenv:lint]
deps =
    flake8
commands =
    flake8 ./src --statistics

; Unit tests
; - Run unit tests without docker environment
[testenv:unit]
changedir = src/CubeServer-common
basepython = python3.10
commands =
    pip3 install .
    pytest

[docker:app]
image = cubeserver-app
healthcheck_cmd = CMD curl -f http://localhost/ || exit 1
healthcheck_timeout = 1
healthcheck_retries = 30
healthcheck_interval = 1
healthcheck_start_period = 1

[docker:mongodb]
image = mongo:latest

[docker:accesspoint]
image = cubeserver-accesspoint:latest

[docker:beaconserver]
image = cubeserver-beaconserver:latest
